// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package com.google.protobuf.descriptor

object DescriptorProtoCompanion extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq.empty
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      com.google.protobuf.descriptor.FileDescriptorSet,
      com.google.protobuf.descriptor.FileDescriptorProto,
      com.google.protobuf.descriptor.DescriptorProto,
      com.google.protobuf.descriptor.ExtensionRangeOptions,
      com.google.protobuf.descriptor.FieldDescriptorProto,
      com.google.protobuf.descriptor.OneofDescriptorProto,
      com.google.protobuf.descriptor.EnumDescriptorProto,
      com.google.protobuf.descriptor.EnumValueDescriptorProto,
      com.google.protobuf.descriptor.ServiceDescriptorProto,
      com.google.protobuf.descriptor.MethodDescriptorProto,
      com.google.protobuf.descriptor.FileOptions,
      com.google.protobuf.descriptor.MessageOptions,
      com.google.protobuf.descriptor.FieldOptions,
      com.google.protobuf.descriptor.OneofOptions,
      com.google.protobuf.descriptor.EnumOptions,
      com.google.protobuf.descriptor.EnumValueOptions,
      com.google.protobuf.descriptor.ServiceOptions,
      com.google.protobuf.descriptor.MethodOptions,
      com.google.protobuf.descriptor.UninterpretedOption,
      com.google.protobuf.descriptor.FeatureSet,
      com.google.protobuf.descriptor.FeatureSetDefaults,
      com.google.protobuf.descriptor.SourceCodeInfo,
      com.google.protobuf.descriptor.GeneratedCodeInfo
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """CiBnb29nbGUvcHJvdG9idWYvZGVzY3JpcHRvci5wcm90bxIPZ29vZ2xlLnByb3RvYnVmIlgKEUZpbGVEZXNjcmlwdG9yU2V0E
  kMKBGZpbGUYASADKAsyJC5nb29nbGUucHJvdG9idWYuRmlsZURlc2NyaXB0b3JQcm90b0IJ4j8GEgRmaWxlUgRmaWxlIusGChNGa
  WxlRGVzY3JpcHRvclByb3RvEh0KBG5hbWUYASABKAlCCeI/BhIEbmFtZVIEbmFtZRImCgdwYWNrYWdlGAIgASgJQgziPwkSB3BhY
  2thZ2VSB3BhY2thZ2USLwoKZGVwZW5kZW5jeRgDIAMoCUIP4j8MEgpkZXBlbmRlbmN5UgpkZXBlbmRlbmN5EkIKEXB1YmxpY19kZ
  XBlbmRlbmN5GAogAygFQhXiPxISEHB1YmxpY0RlcGVuZGVuY3lSEHB1YmxpY0RlcGVuZGVuY3kSPAoPd2Vha19kZXBlbmRlbmN5G
  AsgAygFQhPiPxASDndlYWtEZXBlbmRlbmN5Ug53ZWFrRGVwZW5kZW5jeRJVCgxtZXNzYWdlX3R5cGUYBCADKAsyIC5nb29nbGUuc
  HJvdG9idWYuRGVzY3JpcHRvclByb3RvQhDiPw0SC21lc3NhZ2VUeXBlUgttZXNzYWdlVHlwZRJQCgllbnVtX3R5cGUYBSADKAsyJ
  C5nb29nbGUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90b0IN4j8KEghlbnVtVHlwZVIIZW51bVR5cGUSTwoHc2VydmljZRgGI
  AMoCzInLmdvb2dsZS5wcm90b2J1Zi5TZXJ2aWNlRGVzY3JpcHRvclByb3RvQgziPwkSB3NlcnZpY2VSB3NlcnZpY2USUwoJZXh0Z
  W5zaW9uGAcgAygLMiUuZ29vZ2xlLnByb3RvYnVmLkZpZWxkRGVzY3JpcHRvclByb3RvQg7iPwsSCWV4dGVuc2lvblIJZXh0ZW5za
  W9uEkQKB29wdGlvbnMYCCABKAsyHC5nb29nbGUucHJvdG9idWYuRmlsZU9wdGlvbnNCDOI/CRIHb3B0aW9uc1IHb3B0aW9ucxJeC
  hBzb3VyY2VfY29kZV9pbmZvGAkgASgLMh8uZ29vZ2xlLnByb3RvYnVmLlNvdXJjZUNvZGVJbmZvQhPiPxASDnNvdXJjZUNvZGVJb
  mZvUg5zb3VyY2VDb2RlSW5mbxIjCgZzeW50YXgYDCABKAlCC+I/CBIGc3ludGF4UgZzeW50YXgSQAoHZWRpdGlvbhgOIAEoDjIYL
  mdvb2dsZS5wcm90b2J1Zi5FZGl0aW9uQgziPwkSB2VkaXRpb25SB2VkaXRpb24ilQgKD0Rlc2NyaXB0b3JQcm90bxIdCgRuYW1lG
  AEgASgJQgniPwYSBG5hbWVSBG5hbWUSRwoFZmllbGQYAiADKAsyJS5nb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvd
  G9CCuI/BxIFZmllbGRSBWZpZWxkElMKCWV4dGVuc2lvbhgGIAMoCzIlLmdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQc
  m90b0IO4j8LEglleHRlbnNpb25SCWV4dGVuc2lvbhJSCgtuZXN0ZWRfdHlwZRgDIAMoCzIgLmdvb2dsZS5wcm90b2J1Zi5EZXNjc
  mlwdG9yUHJvdG9CD+I/DBIKbmVzdGVkVHlwZVIKbmVzdGVkVHlwZRJQCgllbnVtX3R5cGUYBCADKAsyJC5nb29nbGUucHJvdG9id
  WYuRW51bURlc2NyaXB0b3JQcm90b0IN4j8KEghlbnVtVHlwZVIIZW51bVR5cGUSbQoPZXh0ZW5zaW9uX3JhbmdlGAUgAygLMi8uZ
  29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5FeHRlbnNpb25SYW5nZUIT4j8QEg5leHRlbnNpb25SYW5nZVIOZXh0ZW5za
  W9uUmFuZ2USVAoKb25lb2ZfZGVjbBgIIAMoCzIlLmdvb2dsZS5wcm90b2J1Zi5PbmVvZkRlc2NyaXB0b3JQcm90b0IO4j8LEglvb
  mVvZkRlY2xSCW9uZW9mRGVjbBJHCgdvcHRpb25zGAcgASgLMh8uZ29vZ2xlLnByb3RvYnVmLk1lc3NhZ2VPcHRpb25zQgziPwkSB
  29wdGlvbnNSB29wdGlvbnMSaQoOcmVzZXJ2ZWRfcmFuZ2UYCSADKAsyLi5nb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvL
  lJlc2VydmVkUmFuZ2VCEuI/DxINcmVzZXJ2ZWRSYW5nZVINcmVzZXJ2ZWRSYW5nZRI2Cg1yZXNlcnZlZF9uYW1lGAogAygJQhHiP
  w4SDHJlc2VydmVkTmFtZVIMcmVzZXJ2ZWROYW1lGp4BCg5FeHRlbnNpb25SYW5nZRIgCgVzdGFydBgBIAEoBUIK4j8HEgVzdGFyd
  FIFc3RhcnQSGgoDZW5kGAIgASgFQgjiPwUSA2VuZFIDZW5kEk4KB29wdGlvbnMYAyABKAsyJi5nb29nbGUucHJvdG9idWYuRXh0Z
  W5zaW9uUmFuZ2VPcHRpb25zQgziPwkSB29wdGlvbnNSB29wdGlvbnMaTQoNUmVzZXJ2ZWRSYW5nZRIgCgVzdGFydBgBIAEoBUIK4
  j8HEgVzdGFydFIFc3RhcnQSGgoDZW5kGAIgASgFQgjiPwUSA2VuZFIDZW5kIv4FChVFeHRlbnNpb25SYW5nZU9wdGlvbnMScgoUd
  W5pbnRlcnByZXRlZF9vcHRpb24Y5wcgAygLMiQuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb25CGOI/FRITdW5pb
  nRlcnByZXRlZE9wdGlvblITdW5pbnRlcnByZXRlZE9wdGlvbhJpCgtkZWNsYXJhdGlvbhgCIAMoCzIyLmdvb2dsZS5wcm90b2J1Z
  i5FeHRlbnNpb25SYW5nZU9wdGlvbnMuRGVjbGFyYXRpb25CE4gBAuI/DRILZGVjbGFyYXRpb25SC2RlY2xhcmF0aW9uEkYKCGZlY
  XR1cmVzGDIgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXRCDeI/ChIIZmVhdHVyZXNSCGZlYXR1cmVzEn4KDHZlcmlma
  WNhdGlvbhgDIAEoDjI4Lmdvb2dsZS5wcm90b2J1Zi5FeHRlbnNpb25SYW5nZU9wdGlvbnMuVmVyaWZpY2F0aW9uU3RhdGU6ClVOV
  kVSSUZJRURCFIgBAuI/DhIMdmVyaWZpY2F0aW9uUgx2ZXJpZmljYXRpb24a2QEKC0RlY2xhcmF0aW9uEiMKBm51bWJlchgBIAEoB
  UIL4j8IEgZudW1iZXJSBm51bWJlchIqCglmdWxsX25hbWUYAiABKAlCDeI/ChIIZnVsbE5hbWVSCGZ1bGxOYW1lEh0KBHR5cGUYA
  yABKAlCCeI/BhIEdHlwZVIEdHlwZRIpCghyZXNlcnZlZBgFIAEoCEIN4j8KEghyZXNlcnZlZFIIcmVzZXJ2ZWQSKQoIcmVwZWF0Z
  WQYBiABKAhCDeI/ChIIcmVwZWF0ZWRSCHJlcGVhdGVkSgQIBBAFIlcKEVZlcmlmaWNhdGlvblN0YXRlEiEKC0RFQ0xBUkFUSU9OE
  AAaEOI/DRILREVDTEFSQVRJT04SHwoKVU5WRVJJRklFRBABGg/iPwwSClVOVkVSSUZJRUQqCQjoBxCAgICAAiLmCgoURmllbGREZ
  XNjcmlwdG9yUHJvdG8SHQoEbmFtZRgBIAEoCUIJ4j8GEgRuYW1lUgRuYW1lEiMKBm51bWJlchgDIAEoBUIL4j8IEgZudW1iZXJSB
  m51bWJlchJNCgVsYWJlbBgEIAEoDjIrLmdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQcm90by5MYWJlbEIK4j8HEgVsY
  WJlbFIFbGFiZWwSSQoEdHlwZRgFIAEoDjIqLmdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQcm90by5UeXBlQgniPwYSB
  HR5cGVSBHR5cGUSKgoJdHlwZV9uYW1lGAYgASgJQg3iPwoSCHR5cGVOYW1lUgh0eXBlTmFtZRIpCghleHRlbmRlZRgCIAEoCUIN4
  j8KEghleHRlbmRlZVIIZXh0ZW5kZWUSNgoNZGVmYXVsdF92YWx1ZRgHIAEoCUIR4j8OEgxkZWZhdWx0VmFsdWVSDGRlZmF1bHRWY
  Wx1ZRIwCgtvbmVvZl9pbmRleBgJIAEoBUIP4j8MEgpvbmVvZkluZGV4UgpvbmVvZkluZGV4EioKCWpzb25fbmFtZRgKIAEoCUIN4
  j8KEghqc29uTmFtZVIIanNvbk5hbWUSRQoHb3B0aW9ucxgIIAEoCzIdLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnNCDOI/C
  RIHb3B0aW9uc1IHb3B0aW9ucxI8Cg9wcm90bzNfb3B0aW9uYWwYESABKAhCE+I/EBIOcHJvdG8zT3B0aW9uYWxSDnByb3RvM09wd
  GlvbmFsIvgECgRUeXBlEiEKC1RZUEVfRE9VQkxFEAEaEOI/DRILVFlQRV9ET1VCTEUSHwoKVFlQRV9GTE9BVBACGg/iPwwSClRZU
  EVfRkxPQVQSHwoKVFlQRV9JTlQ2NBADGg/iPwwSClRZUEVfSU5UNjQSIQoLVFlQRV9VSU5UNjQQBBoQ4j8NEgtUWVBFX1VJTlQ2N
  BIfCgpUWVBFX0lOVDMyEAUaD+I/DBIKVFlQRV9JTlQzMhIjCgxUWVBFX0ZJWEVENjQQBhoR4j8OEgxUWVBFX0ZJWEVENjQSIwoMV
  FlQRV9GSVhFRDMyEAcaEeI/DhIMVFlQRV9GSVhFRDMyEh0KCVRZUEVfQk9PTBAIGg7iPwsSCVRZUEVfQk9PTBIhCgtUWVBFX1NUU
  klORxAJGhDiPw0SC1RZUEVfU1RSSU5HEh8KClRZUEVfR1JPVVAQChoP4j8MEgpUWVBFX0dST1VQEiMKDFRZUEVfTUVTU0FHRRALG
  hHiPw4SDFRZUEVfTUVTU0FHRRIfCgpUWVBFX0JZVEVTEAwaD+I/DBIKVFlQRV9CWVRFUxIhCgtUWVBFX1VJTlQzMhANGhDiPw0SC
  1RZUEVfVUlOVDMyEh0KCVRZUEVfRU5VTRAOGg7iPwsSCVRZUEVfRU5VTRIlCg1UWVBFX1NGSVhFRDMyEA8aEuI/DxINVFlQRV9TR
  klYRUQzMhIlCg1UWVBFX1NGSVhFRDY0EBAaEuI/DxINVFlQRV9TRklYRUQ2NBIhCgtUWVBFX1NJTlQzMhARGhDiPw0SC1RZUEVfU
  0lOVDMyEiEKC1RZUEVfU0lOVDY0EBIaEOI/DRILVFlQRV9TSU5UNjQiggEKBUxhYmVsEicKDkxBQkVMX09QVElPTkFMEAEaE+I/E
  BIOTEFCRUxfT1BUSU9OQUwSJwoOTEFCRUxfUkVQRUFURUQQAxoT4j8QEg5MQUJFTF9SRVBFQVRFRBInCg5MQUJFTF9SRVFVSVJFR
  BACGhPiPxASDkxBQkVMX1JFUVVJUkVEInwKFE9uZW9mRGVzY3JpcHRvclByb3RvEh0KBG5hbWUYASABKAlCCeI/BhIEbmFtZVIEb
  mFtZRJFCgdvcHRpb25zGAIgASgLMh0uZ29vZ2xlLnByb3RvYnVmLk9uZW9mT3B0aW9uc0IM4j8JEgdvcHRpb25zUgdvcHRpb25zI
  sUDChNFbnVtRGVzY3JpcHRvclByb3RvEh0KBG5hbWUYASABKAlCCeI/BhIEbmFtZVIEbmFtZRJLCgV2YWx1ZRgCIAMoCzIpLmdvb
  2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVEZXNjcmlwdG9yUHJvdG9CCuI/BxIFdmFsdWVSBXZhbHVlEkQKB29wdGlvbnMYAyABKAsyH
  C5nb29nbGUucHJvdG9idWYuRW51bU9wdGlvbnNCDOI/CRIHb3B0aW9uc1IHb3B0aW9ucxJxCg5yZXNlcnZlZF9yYW5nZRgEIAMoC
  zI2Lmdvb2dsZS5wcm90b2J1Zi5FbnVtRGVzY3JpcHRvclByb3RvLkVudW1SZXNlcnZlZFJhbmdlQhLiPw8SDXJlc2VydmVkUmFuZ
  2VSDXJlc2VydmVkUmFuZ2USNgoNcmVzZXJ2ZWRfbmFtZRgFIAMoCUIR4j8OEgxyZXNlcnZlZE5hbWVSDHJlc2VydmVkTmFtZRpRC
  hFFbnVtUmVzZXJ2ZWRSYW5nZRIgCgVzdGFydBgBIAEoBUIK4j8HEgVzdGFydFIFc3RhcnQSGgoDZW5kGAIgASgFQgjiPwUSA2VuZ
  FIDZW5kIqkBChhFbnVtVmFsdWVEZXNjcmlwdG9yUHJvdG8SHQoEbmFtZRgBIAEoCUIJ4j8GEgRuYW1lUgRuYW1lEiMKBm51bWJlc
  hgCIAEoBUIL4j8IEgZudW1iZXJSBm51bWJlchJJCgdvcHRpb25zGAMgASgLMiEuZ29vZ2xlLnByb3RvYnVmLkVudW1WYWx1ZU9wd
  GlvbnNCDOI/CRIHb3B0aW9uc1IHb3B0aW9ucyLNAQoWU2VydmljZURlc2NyaXB0b3JQcm90bxIdCgRuYW1lGAEgASgJQgniPwYSB
  G5hbWVSBG5hbWUSSwoGbWV0aG9kGAIgAygLMiYuZ29vZ2xlLnByb3RvYnVmLk1ldGhvZERlc2NyaXB0b3JQcm90b0IL4j8IEgZtZ
  XRob2RSBm1ldGhvZBJHCgdvcHRpb25zGAMgASgLMh8uZ29vZ2xlLnByb3RvYnVmLlNlcnZpY2VPcHRpb25zQgziPwkSB29wdGlvb
  nNSB29wdGlvbnMi7wIKFU1ldGhvZERlc2NyaXB0b3JQcm90bxIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hbWUSLQoKaW5wd
  XRfdHlwZRgCIAEoCUIO4j8LEglpbnB1dFR5cGVSCWlucHV0VHlwZRIwCgtvdXRwdXRfdHlwZRgDIAEoCUIP4j8MEgpvdXRwdXRUe
  XBlUgpvdXRwdXRUeXBlEkYKB29wdGlvbnMYBCABKAsyHi5nb29nbGUucHJvdG9idWYuTWV0aG9kT3B0aW9uc0IM4j8JEgdvcHRpb
  25zUgdvcHRpb25zEkYKEGNsaWVudF9zdHJlYW1pbmcYBSABKAg6BWZhbHNlQhTiPxESD2NsaWVudFN0cmVhbWluZ1IPY2xpZW50U
  3RyZWFtaW5nEkYKEHNlcnZlcl9zdHJlYW1pbmcYBiABKAg6BWZhbHNlQhTiPxESD3NlcnZlclN0cmVhbWluZ1IPc2VydmVyU3RyZ
  WFtaW5nIqUNCgtGaWxlT3B0aW9ucxIzCgxqYXZhX3BhY2thZ2UYASABKAlCEOI/DRILamF2YVBhY2thZ2VSC2phdmFQYWNrYWdlE
  kkKFGphdmFfb3V0ZXJfY2xhc3NuYW1lGAggASgJQhfiPxQSEmphdmFPdXRlckNsYXNzbmFtZVISamF2YU91dGVyQ2xhc3NuYW1lE
  k0KE2phdmFfbXVsdGlwbGVfZmlsZXMYCiABKAg6BWZhbHNlQhbiPxMSEWphdmFNdWx0aXBsZUZpbGVzUhFqYXZhTXVsdGlwbGVGa
  WxlcxJiCh1qYXZhX2dlbmVyYXRlX2VxdWFsc19hbmRfaGFzaBgUIAEoCEIgGAHiPxsSGWphdmFHZW5lcmF0ZUVxdWFsc0FuZEhhc
  2hSGWphdmFHZW5lcmF0ZUVxdWFsc0FuZEhhc2gSVAoWamF2YV9zdHJpbmdfY2hlY2tfdXRmOBgbIAEoCDoFZmFsc2VCGOI/FRITa
  mF2YVN0cmluZ0NoZWNrVXRmOFITamF2YVN0cmluZ0NoZWNrVXRmOBJlCgxvcHRpbWl6ZV9mb3IYCSABKA4yKS5nb29nbGUucHJvd
  G9idWYuRmlsZU9wdGlvbnMuT3B0aW1pemVNb2RlOgVTUEVFREIQ4j8NEgtvcHRpbWl6ZUZvclILb3B0aW1pemVGb3ISLQoKZ29fc
  GFja2FnZRgLIAEoCUIO4j8LEglnb1BhY2thZ2VSCWdvUGFja2FnZRJNChNjY19nZW5lcmljX3NlcnZpY2VzGBAgASgIOgVmYWxzZ
  UIW4j8TEhFjY0dlbmVyaWNTZXJ2aWNlc1IRY2NHZW5lcmljU2VydmljZXMSUwoVamF2YV9nZW5lcmljX3NlcnZpY2VzGBEgASgIO
  gVmYWxzZUIY4j8VEhNqYXZhR2VuZXJpY1NlcnZpY2VzUhNqYXZhR2VuZXJpY1NlcnZpY2VzEk0KE3B5X2dlbmVyaWNfc2VydmljZ
  XMYEiABKAg6BWZhbHNlQhbiPxMSEXB5R2VuZXJpY1NlcnZpY2VzUhFweUdlbmVyaWNTZXJ2aWNlcxI2CgpkZXByZWNhdGVkGBcgA
  SgIOgVmYWxzZUIP4j8MEgpkZXByZWNhdGVkUgpkZXByZWNhdGVkEkMKEGNjX2VuYWJsZV9hcmVuYXMYHyABKAg6BHRydWVCE+I/E
  BIOY2NFbmFibGVBcmVuYXNSDmNjRW5hYmxlQXJlbmFzEkAKEW9iamNfY2xhc3NfcHJlZml4GCQgASgJQhTiPxESD29iamNDbGFzc
  1ByZWZpeFIPb2JqY0NsYXNzUHJlZml4Ej8KEGNzaGFycF9uYW1lc3BhY2UYJSABKAlCFOI/ERIPY3NoYXJwTmFtZXNwYWNlUg9jc
  2hhcnBOYW1lc3BhY2USMwoMc3dpZnRfcHJlZml4GCcgASgJQhDiPw0SC3N3aWZ0UHJlZml4Ugtzd2lmdFByZWZpeBI9ChBwaHBfY
  2xhc3NfcHJlZml4GCggASgJQhPiPxASDnBocENsYXNzUHJlZml4Ug5waHBDbGFzc1ByZWZpeBI2Cg1waHBfbmFtZXNwYWNlGCkgA
  SgJQhHiPw4SDHBocE5hbWVzcGFjZVIMcGhwTmFtZXNwYWNlEk8KFnBocF9tZXRhZGF0YV9uYW1lc3BhY2UYLCABKAlCGeI/FhIUc
  GhwTWV0YWRhdGFOYW1lc3BhY2VSFHBocE1ldGFkYXRhTmFtZXNwYWNlEjMKDHJ1YnlfcGFja2FnZRgtIAEoCUIQ4j8NEgtydWJ5U
  GFja2FnZVILcnVieVBhY2thZ2USRgoIZmVhdHVyZXMYMiABKAsyGy5nb29nbGUucHJvdG9idWYuRmVhdHVyZVNldEIN4j8KEghmZ
  WF0dXJlc1IIZmVhdHVyZXMScgoUdW5pbnRlcnByZXRlZF9vcHRpb24Y5wcgAygLMiQuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwc
  mV0ZWRPcHRpb25CGOI/FRITdW5pbnRlcnByZXRlZE9wdGlvblITdW5pbnRlcnByZXRlZE9wdGlvbiJpCgxPcHRpbWl6ZU1vZGUSF
  QoFU1BFRUQQARoK4j8HEgVTUEVFRBIdCglDT0RFX1NJWkUQAhoO4j8LEglDT0RFX1NJWkUSIwoMTElURV9SVU5USU1FEAMaEeI/D
  hIMTElURV9SVU5USU1FKgkI6AcQgICAgAJKBAgqECtKBAgmECdSFHBocF9nZW5lcmljX3NlcnZpY2VzIqIFCg5NZXNzYWdlT3B0a
  W9ucxJXChdtZXNzYWdlX3NldF93aXJlX2Zvcm1hdBgBIAEoCDoFZmFsc2VCGeI/FhIUbWVzc2FnZVNldFdpcmVGb3JtYXRSFG1lc
  3NhZ2VTZXRXaXJlRm9ybWF0Em8KH25vX3N0YW5kYXJkX2Rlc2NyaXB0b3JfYWNjZXNzb3IYAiABKAg6BWZhbHNlQiHiPx4SHG5vU
  3RhbmRhcmREZXNjcmlwdG9yQWNjZXNzb3JSHG5vU3RhbmRhcmREZXNjcmlwdG9yQWNjZXNzb3ISNgoKZGVwcmVjYXRlZBgDIAEoC
  DoFZmFsc2VCD+I/DBIKZGVwcmVjYXRlZFIKZGVwcmVjYXRlZBIqCgltYXBfZW50cnkYByABKAhCDeI/ChIIbWFwRW50cnlSCG1hc
  EVudHJ5En0KJmRlcHJlY2F0ZWRfbGVnYWN5X2pzb25fZmllbGRfY29uZmxpY3RzGAsgASgIQikYAeI/JBIiZGVwcmVjYXRlZExlZ
  2FjeUpzb25GaWVsZENvbmZsaWN0c1IiZGVwcmVjYXRlZExlZ2FjeUpzb25GaWVsZENvbmZsaWN0cxJGCghmZWF0dXJlcxgMIAEoC
  zIbLmdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0Qg3iPwoSCGZlYXR1cmVzUghmZWF0dXJlcxJyChR1bmludGVycHJldGVkX29wd
  GlvbhjnByADKAsyJC5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbkIY4j8VEhN1bmludGVycHJldGVkT3B0aW9uU
  hN1bmludGVycHJldGVkT3B0aW9uKgkI6AcQgICAgAJKBAgEEAVKBAgFEAZKBAgGEAdKBAgIEAlKBAgJEAoiohMKDEZpZWxkT3B0a
  W9ucxJNCgVjdHlwZRgBIAEoDjIjLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnMuQ1R5cGU6BlNUUklOR0IK4j8HEgVjdHlwZ
  VIFY3R5cGUSIwoGcGFja2VkGAIgASgIQgviPwgSBnBhY2tlZFIGcGFja2VkElQKBmpzdHlwZRgGIAEoDjIkLmdvb2dsZS5wcm90b
  2J1Zi5GaWVsZE9wdGlvbnMuSlNUeXBlOglKU19OT1JNQUxCC+I/CBIGanN0eXBlUgZqc3R5cGUSJAoEbGF6eRgFIAEoCDoFZmFsc
  2VCCeI/BhIEbGF6eVIEbGF6eRJDCg91bnZlcmlmaWVkX2xhenkYDyABKAg6BWZhbHNlQhPiPxASDnVudmVyaWZpZWRMYXp5Ug51b
  nZlcmlmaWVkTGF6eRI2CgpkZXByZWNhdGVkGAMgASgIOgVmYWxzZUIP4j8MEgpkZXByZWNhdGVkUgpkZXByZWNhdGVkEiQKBHdlY
  WsYCiABKAg6BWZhbHNlQgniPwYSBHdlYWtSBHdlYWsSOgoMZGVidWdfcmVkYWN0GBAgASgIOgVmYWxzZUIQ4j8NEgtkZWJ1Z1JlZ
  GFjdFILZGVidWdSZWRhY3QSWwoJcmV0ZW50aW9uGBEgASgOMi0uZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucy5PcHRpb25SZ
  XRlbnRpb25CDuI/CxIJcmV0ZW50aW9uUglyZXRlbnRpb24SVgoHdGFyZ2V0cxgTIAMoDjIuLmdvb2dsZS5wcm90b2J1Zi5GaWVsZ
  E9wdGlvbnMuT3B0aW9uVGFyZ2V0VHlwZUIM4j8JEgd0YXJnZXRzUgd0YXJnZXRzEm0KEGVkaXRpb25fZGVmYXVsdHMYFCADKAsyL
  C5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLkVkaXRpb25EZWZhdWx0QhTiPxESD2VkaXRpb25EZWZhdWx0c1IPZWRpdGlvb
  kRlZmF1bHRzEkYKCGZlYXR1cmVzGBUgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXRCDeI/ChIIZmVhdHVyZXNSCGZlY
  XR1cmVzEmoKD2ZlYXR1cmVfc3VwcG9ydBgWIAEoCzIsLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnMuRmVhdHVyZVN1cHBvc
  nRCE+I/EBIOZmVhdHVyZVN1cHBvcnRSDmZlYXR1cmVTdXBwb3J0EnIKFHVuaW50ZXJwcmV0ZWRfb3B0aW9uGOcHIAMoCzIkLmdvb
  2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uQhjiPxUSE3VuaW50ZXJwcmV0ZWRPcHRpb25SE3VuaW50ZXJwcmV0ZWRPc
  HRpb24adAoORWRpdGlvbkRlZmF1bHQSQAoHZWRpdGlvbhgDIAEoDjIYLmdvb2dsZS5wcm90b2J1Zi5FZGl0aW9uQgziPwkSB2Vka
  XRpb25SB2VkaXRpb24SIAoFdmFsdWUYAiABKAlCCuI/BxIFdmFsdWVSBXZhbHVlGvQCCg5GZWF0dXJlU3VwcG9ydBJfChJlZGl0a
  W9uX2ludHJvZHVjZWQYASABKA4yGC5nb29nbGUucHJvdG9idWYuRWRpdGlvbkIW4j8TEhFlZGl0aW9uSW50cm9kdWNlZFIRZWRpd
  GlvbkludHJvZHVjZWQSXwoSZWRpdGlvbl9kZXByZWNhdGVkGAIgASgOMhguZ29vZ2xlLnByb3RvYnVmLkVkaXRpb25CFuI/ExIRZ
  WRpdGlvbkRlcHJlY2F0ZWRSEWVkaXRpb25EZXByZWNhdGVkEkgKE2RlcHJlY2F0aW9uX3dhcm5pbmcYAyABKAlCF+I/FBISZGVwc
  mVjYXRpb25XYXJuaW5nUhJkZXByZWNhdGlvbldhcm5pbmcSVgoPZWRpdGlvbl9yZW1vdmVkGAQgASgOMhguZ29vZ2xlLnByb3RvY
  nVmLkVkaXRpb25CE+I/EBIOZWRpdGlvblJlbW92ZWRSDmVkaXRpb25SZW1vdmVkIloKBUNUeXBlEhcKBlNUUklORxAAGgviPwgSB
  lNUUklORxITCgRDT1JEEAEaCeI/BhIEQ09SRBIjCgxTVFJJTkdfUElFQ0UQAhoR4j8OEgxTVFJJTkdfUElFQ0UiZQoGSlNUeXBlE
  h0KCUpTX05PUk1BTBAAGg7iPwsSCUpTX05PUk1BTBIdCglKU19TVFJJTkcQARoO4j8LEglKU19TVFJJTkcSHQoJSlNfTlVNQkVSE
  AIaDuI/CxIJSlNfTlVNQkVSIpwBCg9PcHRpb25SZXRlbnRpb24SLQoRUkVURU5USU9OX1VOS05PV04QABoW4j8TEhFSRVRFTlRJT
  05fVU5LTk9XThItChFSRVRFTlRJT05fUlVOVElNRRABGhbiPxMSEVJFVEVOVElPTl9SVU5USU1FEisKEFJFVEVOVElPTl9TT1VSQ
  0UQAhoV4j8SEhBSRVRFTlRJT05fU09VUkNFIpAEChBPcHRpb25UYXJnZXRUeXBlEjEKE1RBUkdFVF9UWVBFX1VOS05PV04QABoY4
  j8VEhNUQVJHRVRfVFlQRV9VTktOT1dOEisKEFRBUkdFVF9UWVBFX0ZJTEUQARoV4j8SEhBUQVJHRVRfVFlQRV9GSUxFEkEKG1RBU
  kdFVF9UWVBFX0VYVEVOU0lPTl9SQU5HRRACGiDiPx0SG1RBUkdFVF9UWVBFX0VYVEVOU0lPTl9SQU5HRRIxChNUQVJHRVRfVFlQR
  V9NRVNTQUdFEAMaGOI/FRITVEFSR0VUX1RZUEVfTUVTU0FHRRItChFUQVJHRVRfVFlQRV9GSUVMRBAEGhbiPxMSEVRBUkdFVF9UW
  VBFX0ZJRUxEEi0KEVRBUkdFVF9UWVBFX09ORU9GEAUaFuI/ExIRVEFSR0VUX1RZUEVfT05FT0YSKwoQVEFSR0VUX1RZUEVfRU5VT
  RAGGhXiPxISEFRBUkdFVF9UWVBFX0VOVU0SNwoWVEFSR0VUX1RZUEVfRU5VTV9FTlRSWRAHGhviPxgSFlRBUkdFVF9UWVBFX0VOV
  U1fRU5UUlkSMQoTVEFSR0VUX1RZUEVfU0VSVklDRRAIGhjiPxUSE1RBUkdFVF9UWVBFX1NFUlZJQ0USLwoSVEFSR0VUX1RZUEVfT
  UVUSE9EEAkaF+I/FBISVEFSR0VUX1RZUEVfTUVUSE9EKgkI6AcQgICAgAJKBAgEEAVKBAgSEBMi1QEKDE9uZW9mT3B0aW9ucxJGC
  ghmZWF0dXJlcxgBIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0Qg3iPwoSCGZlYXR1cmVzUghmZWF0dXJlcxJyChR1b
  mludGVycHJldGVkX29wdGlvbhjnByADKAsyJC5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbkIY4j8VEhN1bmlud
  GVycHJldGVkT3B0aW9uUhN1bmludGVycHJldGVkT3B0aW9uKgkI6AcQgICAgAIiwwMKC0VudW1PcHRpb25zEjAKC2FsbG93X2Fsa
  WFzGAIgASgIQg/iPwwSCmFsbG93QWxpYXNSCmFsbG93QWxpYXMSNgoKZGVwcmVjYXRlZBgDIAEoCDoFZmFsc2VCD+I/DBIKZGVwc
  mVjYXRlZFIKZGVwcmVjYXRlZBJ9CiZkZXByZWNhdGVkX2xlZ2FjeV9qc29uX2ZpZWxkX2NvbmZsaWN0cxgGIAEoCEIpGAHiPyQSI
  mRlcHJlY2F0ZWRMZWdhY3lKc29uRmllbGRDb25mbGljdHNSImRlcHJlY2F0ZWRMZWdhY3lKc29uRmllbGRDb25mbGljdHMSRgoIZ
  mVhdHVyZXMYByABKAsyGy5nb29nbGUucHJvdG9idWYuRmVhdHVyZVNldEIN4j8KEghmZWF0dXJlc1IIZmVhdHVyZXMScgoUdW5pb
  nRlcnByZXRlZF9vcHRpb24Y5wcgAygLMiQuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb25CGOI/FRITdW5pbnRlc
  nByZXRlZE9wdGlvblITdW5pbnRlcnByZXRlZE9wdGlvbioJCOgHEICAgIACSgQIBRAGIrkDChBFbnVtVmFsdWVPcHRpb25zEjYKC
  mRlcHJlY2F0ZWQYASABKAg6BWZhbHNlQg/iPwwSCmRlcHJlY2F0ZWRSCmRlcHJlY2F0ZWQSRgoIZmVhdHVyZXMYAiABKAsyGy5nb
  29nbGUucHJvdG9idWYuRmVhdHVyZVNldEIN4j8KEghmZWF0dXJlc1IIZmVhdHVyZXMSOgoMZGVidWdfcmVkYWN0GAMgASgIOgVmY
  WxzZUIQ4j8NEgtkZWJ1Z1JlZGFjdFILZGVidWdSZWRhY3QSagoPZmVhdHVyZV9zdXBwb3J0GAQgASgLMiwuZ29vZ2xlLnByb3RvY
  nVmLkZpZWxkT3B0aW9ucy5GZWF0dXJlU3VwcG9ydEIT4j8QEg5mZWF0dXJlU3VwcG9ydFIOZmVhdHVyZVN1cHBvcnQScgoUdW5pb
  nRlcnByZXRlZF9vcHRpb24Y5wcgAygLMiQuZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb25CGOI/FRITdW5pbnRlc
  nByZXRlZE9wdGlvblITdW5pbnRlcnByZXRlZE9wdGlvbioJCOgHEICAgIACIo8CCg5TZXJ2aWNlT3B0aW9ucxJGCghmZWF0dXJlc
  xgiIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0Qg3iPwoSCGZlYXR1cmVzUghmZWF0dXJlcxI2CgpkZXByZWNhdGVkG
  CEgASgIOgVmYWxzZUIP4j8MEgpkZXByZWNhdGVkUgpkZXByZWNhdGVkEnIKFHVuaW50ZXJwcmV0ZWRfb3B0aW9uGOcHIAMoCzIkL
  mdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uQhjiPxUSE3VuaW50ZXJwcmV0ZWRPcHRpb25SE3VuaW50ZXJwcmV0Z
  WRPcHRpb24qCQjoBxCAgICAAiKtBAoNTWV0aG9kT3B0aW9ucxI2CgpkZXByZWNhdGVkGCEgASgIOgVmYWxzZUIP4j8MEgpkZXByZ
  WNhdGVkUgpkZXByZWNhdGVkEogBChFpZGVtcG90ZW5jeV9sZXZlbBgiIAEoDjIvLmdvb2dsZS5wcm90b2J1Zi5NZXRob2RPcHRpb
  25zLklkZW1wb3RlbmN5TGV2ZWw6E0lERU1QT1RFTkNZX1VOS05PV05CFeI/EhIQaWRlbXBvdGVuY3lMZXZlbFIQaWRlbXBvdGVuY
  3lMZXZlbBJGCghmZWF0dXJlcxgjIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0Qg3iPwoSCGZlYXR1cmVzUghmZWF0d
  XJlcxJyChR1bmludGVycHJldGVkX29wdGlvbhjnByADKAsyJC5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbkIY4
  j8VEhN1bmludGVycHJldGVkT3B0aW9uUhN1bmludGVycHJldGVkT3B0aW9uIpEBChBJZGVtcG90ZW5jeUxldmVsEjEKE0lERU1QT
  1RFTkNZX1VOS05PV04QABoY4j8VEhNJREVNUE9URU5DWV9VTktOT1dOEikKD05PX1NJREVfRUZGRUNUUxABGhTiPxESD05PX1NJR
  EVfRUZGRUNUUxIfCgpJREVNUE9URU5UEAIaD+I/DBIKSURFTVBPVEVOVCoJCOgHEICAgIACIsMEChNVbmludGVycHJldGVkT3B0a
  W9uEkwKBG5hbWUYAiADKAsyLS5nb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi5OYW1lUGFydEIJ4j8GEgRuYW1lU
  gRuYW1lEj8KEGlkZW50aWZpZXJfdmFsdWUYAyABKAlCFOI/ERIPaWRlbnRpZmllclZhbHVlUg9pZGVudGlmaWVyVmFsdWUSQwoSc
  G9zaXRpdmVfaW50X3ZhbHVlGAQgASgEQhXiPxISEHBvc2l0aXZlSW50VmFsdWVSEHBvc2l0aXZlSW50VmFsdWUSQwoSbmVnYXRpd
  mVfaW50X3ZhbHVlGAUgASgDQhXiPxISEG5lZ2F0aXZlSW50VmFsdWVSEG5lZ2F0aXZlSW50VmFsdWUSMwoMZG91YmxlX3ZhbHVlG
  AYgASgBQhDiPw0SC2RvdWJsZVZhbHVlUgtkb3VibGVWYWx1ZRIzCgxzdHJpbmdfdmFsdWUYByABKAxCEOI/DRILc3RyaW5nVmFsd
  WVSC3N0cmluZ1ZhbHVlEjwKD2FnZ3JlZ2F0ZV92YWx1ZRgIIAEoCUIT4j8QEg5hZ2dyZWdhdGVWYWx1ZVIOYWdncmVnYXRlVmFsd
  WUaawoITmFtZVBhcnQSKgoJbmFtZV9wYXJ0GAEgAigJQg3iPwoSCG5hbWVQYXJ0UghuYW1lUGFydBIzCgxpc19leHRlbnNpb24YA
  iACKAhCEOI/DRILaXNFeHRlbnNpb25SC2lzRXh0ZW5zaW9uIpkOCgpGZWF0dXJlU2V0EqMBCg5maWVsZF9wcmVzZW5jZRgBIAEoD
  jIpLmdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0LkZpZWxkUHJlc2VuY2VCUYgBAZgBBJgBAaIBDRIIRVhQTElDSVQYhAeiAQ0SC
  ElNUExJQ0lUGOcHogENEghFWFBMSUNJVBjoB7IBAwjoB+I/DxINZmllbGRQcmVzZW5jZVINZmllbGRQcmVzZW5jZRJ5CgllbnVtX
  3R5cGUYAiABKA4yJC5nb29nbGUucHJvdG9idWYuRmVhdHVyZVNldC5FbnVtVHlwZUI2iAEBmAEGmAEBogELEgZDTE9TRUQYhAeiA
  QkSBE9QRU4Y5weyAQMI6AfiPwoSCGVudW1UeXBlUghlbnVtVHlwZRKyAQoXcmVwZWF0ZWRfZmllbGRfZW5jb2RpbmcYAyABKA4yM
  S5nb29nbGUucHJvdG9idWYuRmVhdHVyZVNldC5SZXBlYXRlZEZpZWxkRW5jb2RpbmdCR4gBAZgBBJgBAaIBDRIIRVhQQU5ERUQYh
  AeiAQsSBlBBQ0tFRBjnB7IBAwjoB+I/FxIVcmVwZWF0ZWRGaWVsZEVuY29kaW5nUhVyZXBlYXRlZEZpZWxkRW5jb2RpbmcSkQEKD
  3V0ZjhfdmFsaWRhdGlvbhgEIAEoDjIqLmdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0LlV0ZjhWYWxpZGF0aW9uQjyIAQGYAQSYA
  QGiAQkSBE5PTkUYhAeiAQsSBlZFUklGWRjnB7IBAwjoB+I/EBIOdXRmOFZhbGlkYXRpb25SDnV0ZjhWYWxpZGF0aW9uEpIBChBtZ
  XNzYWdlX2VuY29kaW5nGAUgASgOMisuZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXQuTWVzc2FnZUVuY29kaW5nQjqIAQGYAQSYA
  QGiARQSD0xFTkdUSF9QUkVGSVhFRBiEB7IBAwjoB+I/ERIPbWVzc2FnZUVuY29kaW5nUg9tZXNzYWdlRW5jb2RpbmcSkQEKC2pzb
  25fZm9ybWF0GAYgASgOMiYuZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXQuSnNvbkZvcm1hdEJIiAEBmAEDmAEGmAEBogEXEhJMR
  UdBQ1lfQkVTVF9FRkZPUlQYhAeiAQoSBUFMTE9XGOcHsgEDCOgH4j8MEgpqc29uRm9ybWF0Ugpqc29uRm9ybWF0Iq0BCg1GaWVsZ
  FByZXNlbmNlEjcKFkZJRUxEX1BSRVNFTkNFX1VOS05PV04QABob4j8YEhZGSUVMRF9QUkVTRU5DRV9VTktOT1dOEhsKCEVYUExJQ
  0lUEAEaDeI/ChIIRVhQTElDSVQSGwoISU1QTElDSVQQAhoN4j8KEghJTVBMSUNJVBIpCg9MRUdBQ1lfUkVRVUlSRUQQAxoU4j8RE
  g9MRUdBQ1lfUkVRVUlSRUQiZwoIRW51bVR5cGUSLQoRRU5VTV9UWVBFX1VOS05PV04QABoW4j8TEhFFTlVNX1RZUEVfVU5LTk9XT
  hITCgRPUEVOEAEaCeI/BhIET1BFThIXCgZDTE9TRUQQAhoL4j8IEgZDTE9TRUQimAEKFVJlcGVhdGVkRmllbGRFbmNvZGluZxJJC
  h9SRVBFQVRFRF9GSUVMRF9FTkNPRElOR19VTktOT1dOEAAaJOI/IRIfUkVQRUFURURfRklFTERfRU5DT0RJTkdfVU5LTk9XThIXC
  gZQQUNLRUQQARoL4j8IEgZQQUNLRUQSGwoIRVhQQU5ERUQQAhoN4j8KEghFWFBBTkRFRCJ/Cg5VdGY4VmFsaWRhdGlvbhI5ChdVV
  EY4X1ZBTElEQVRJT05fVU5LTk9XThAAGhziPxkSF1VURjhfVkFMSURBVElPTl9VTktOT1dOEhcKBlZFUklGWRACGgviPwgSBlZFU
  klGWRITCgROT05FEAMaCeI/BhIETk9ORSIECAEQASKYAQoPTWVzc2FnZUVuY29kaW5nEjsKGE1FU1NBR0VfRU5DT0RJTkdfVU5LT
  k9XThAAGh3iPxoSGE1FU1NBR0VfRU5DT0RJTkdfVU5LTk9XThIpCg9MRU5HVEhfUFJFRklYRUQQARoU4j8REg9MRU5HVEhfUFJFR
  klYRUQSHQoJREVMSU1JVEVEEAIaDuI/CxIJREVMSU1JVEVEIocBCgpKc29uRm9ybWF0EjEKE0pTT05fRk9STUFUX1VOS05PV04QA
  BoY4j8VEhNKU09OX0ZPUk1BVF9VTktOT1dOEhUKBUFMTE9XEAEaCuI/BxIFQUxMT1cSLwoSTEVHQUNZX0JFU1RfRUZGT1JUEAIaF
  +I/FBISTEVHQUNZX0JFU1RfRUZGT1JUKgYI6AcQi04qBgiLThCQTioGCJBOEJFOSgYI5wcQ6Aci5AQKEkZlYXR1cmVTZXREZWZhd
  Wx0cxJnCghkZWZhdWx0cxgBIAMoCzI8Lmdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0RGVmYXVsdHMuRmVhdHVyZVNldEVkaXRpb
  25EZWZhdWx0Qg3iPwoSCGRlZmF1bHRzUghkZWZhdWx0cxJWCg9taW5pbXVtX2VkaXRpb24YBCABKA4yGC5nb29nbGUucHJvdG9id
  WYuRWRpdGlvbkIT4j8QEg5taW5pbXVtRWRpdGlvblIObWluaW11bUVkaXRpb24SVgoPbWF4aW11bV9lZGl0aW9uGAUgASgOMhguZ
  29vZ2xlLnByb3RvYnVmLkVkaXRpb25CE+I/EBIObWF4aW11bUVkaXRpb25SDm1heGltdW1FZGl0aW9uGrQCChhGZWF0dXJlU2V0R
  WRpdGlvbkRlZmF1bHQSQAoHZWRpdGlvbhgDIAEoDjIYLmdvb2dsZS5wcm90b2J1Zi5FZGl0aW9uQgziPwkSB2VkaXRpb25SB2Vka
  XRpb24SaAoUb3ZlcnJpZGFibGVfZmVhdHVyZXMYBCABKAsyGy5nb29nbGUucHJvdG9idWYuRmVhdHVyZVNldEIY4j8VEhNvdmVyc
  mlkYWJsZUZlYXR1cmVzUhNvdmVycmlkYWJsZUZlYXR1cmVzElYKDmZpeGVkX2ZlYXR1cmVzGAUgASgLMhsuZ29vZ2xlLnByb3RvY
  nVmLkZlYXR1cmVTZXRCEuI/DxINZml4ZWRGZWF0dXJlc1INZml4ZWRGZWF0dXJlc0oECAEQAkoECAIQA1IIZmVhdHVyZXMikwMKD
  lNvdXJjZUNvZGVJbmZvElMKCGxvY2F0aW9uGAEgAygLMiguZ29vZ2xlLnByb3RvYnVmLlNvdXJjZUNvZGVJbmZvLkxvY2F0aW9uQ
  g3iPwoSCGxvY2F0aW9uUghsb2NhdGlvbhqrAgoITG9jYXRpb24SHwoEcGF0aBgBIAMoBUILEAHiPwYSBHBhdGhSBHBhdGgSHwoEc
  3BhbhgCIAMoBUILEAHiPwYSBHNwYW5SBHNwYW4SPwoQbGVhZGluZ19jb21tZW50cxgDIAEoCUIU4j8REg9sZWFkaW5nQ29tbWVud
  HNSD2xlYWRpbmdDb21tZW50cxJCChF0cmFpbGluZ19jb21tZW50cxgEIAEoCUIV4j8SEhB0cmFpbGluZ0NvbW1lbnRzUhB0cmFpb
  GluZ0NvbW1lbnRzElgKGWxlYWRpbmdfZGV0YWNoZWRfY29tbWVudHMYBiADKAlCHOI/GRIXbGVhZGluZ0RldGFjaGVkQ29tbWVud
  HNSF2xlYWRpbmdEZXRhY2hlZENvbW1lbnRzIsEDChFHZW5lcmF0ZWRDb2RlSW5mbxJeCgphbm5vdGF0aW9uGAEgAygLMi0uZ29vZ
  2xlLnByb3RvYnVmLkdlbmVyYXRlZENvZGVJbmZvLkFubm90YXRpb25CD+I/DBIKYW5ub3RhdGlvblIKYW5ub3RhdGlvbhrLAgoKQ
  W5ub3RhdGlvbhIfCgRwYXRoGAEgAygFQgsQAeI/BhIEcGF0aFIEcGF0aBIwCgtzb3VyY2VfZmlsZRgCIAEoCUIP4j8MEgpzb3VyY
  2VGaWxlUgpzb3VyY2VGaWxlEiAKBWJlZ2luGAMgASgFQgriPwcSBWJlZ2luUgViZWdpbhIaCgNlbmQYBCABKAVCCOI/BRIDZW5kU
  gNlbmQSYQoIc2VtYW50aWMYBSABKA4yNi5nb29nbGUucHJvdG9idWYuR2VuZXJhdGVkQ29kZUluZm8uQW5ub3RhdGlvbi5TZW1hb
  nRpY0IN4j8KEghzZW1hbnRpY1IIc2VtYW50aWMiSQoIU2VtYW50aWMSEwoETk9ORRAAGgniPwYSBE5PTkUSEQoDU0VUEAEaCOI/B
  RIDU0VUEhUKBUFMSUFTEAIaCuI/BxIFQUxJQVMqwgQKB0VkaXRpb24SKQoPRURJVElPTl9VTktOT1dOEAAaFOI/ERIPRURJVElPT
  l9VTktOT1dOEigKDkVESVRJT05fTEVHQUNZEIQHGhPiPxASDkVESVRJT05fTEVHQUNZEigKDkVESVRJT05fUFJPVE8yEOYHGhPiP
  xASDkVESVRJT05fUFJPVE8yEigKDkVESVRJT05fUFJPVE8zEOcHGhPiPxASDkVESVRJT05fUFJPVE8zEiQKDEVESVRJT05fMjAyM
  xDoBxoR4j8OEgxFRElUSU9OXzIwMjMSJAoMRURJVElPTl8yMDI0EOkHGhHiPw4SDEVESVRJT05fMjAyNBIxChNFRElUSU9OXzFfV
  EVTVF9PTkxZEAEaGOI/FRITRURJVElPTl8xX1RFU1RfT05MWRIxChNFRElUSU9OXzJfVEVTVF9PTkxZEAIaGOI/FRITRURJVElPT
  l8yX1RFU1RfT05MWRI7ChdFRElUSU9OXzk5OTk3X1RFU1RfT05MWRCdjQYaHOI/GRIXRURJVElPTl85OTk5N19URVNUX09OTFkSO
  woXRURJVElPTl85OTk5OF9URVNUX09OTFkQno0GGhziPxkSF0VESVRJT05fOTk5OThfVEVTVF9PTkxZEjsKF0VESVRJT05fOTk5O
  TlfVEVTVF9PTkxZEJ+NBhoc4j8ZEhdFRElUSU9OXzk5OTk5X1RFU1RfT05MWRIlCgtFRElUSU9OX01BWBD/////BxoQ4j8NEgtFR
  ElUSU9OX01BWEJ+ChNjb20uZ29vZ2xlLnByb3RvYnVmQhBEZXNjcmlwdG9yUHJvdG9zSAFaLWdvb2dsZS5nb2xhbmcub3JnL3Byb
  3RvYnVmL3R5cGVzL2Rlc2NyaXB0b3JwYvgBAaICA0dQQqoCGkdvb2dsZS5Qcm90b2J1Zi5SZWZsZWN0aW9u"""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor =
    com.google.protobuf.DescriptorProtos.getDescriptor()
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}